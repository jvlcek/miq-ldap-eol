#!/usr/bin/env ruby

# Simulate rubygems adding the top level appliance_console.rb's directory to the path.
$LOAD_PATH.push("#{File.dirname(__FILE__)}/../lib")

require 'authconfig'
require 'configure_apache'
require 'configure_appliance_settings'
require 'configure_database'
require 'configure_selinux'
require 'configure_sssd_rules'
require 'miqldap_configuration'
require 'services'
require 'sssd_conf'

require 'pp' # JJV Remove

unless defined?(say)
  def say(arg)
    puts(arg)
  end
end

module MiQLdapToSssd
  LOGGER = Logger.new('miq_ldap_to_sssd.log')
  SSSD_CONF_FILE = "/etc/sssd/sssd.conf".freeze

  LOGGER.formatter = proc do |severity, time, progname, msg|
    "[#{time}] #{severity}: #{msg}\n"
  end

  if __FILE__ == $PROGRAM_NAME
    LOGGER.debug("Running #{$PROGRAM_NAME}")

    initial_settings = MiqLdapConfiguration.initial_settings
    LOGGER.debug("Initial Settings #{initial_settings}")

    unless initial_settings[:normalize_userids_only]
      if File.exists?(SSSD_CONF_FILE)
        say("ERROR: #{SSSD_CONF_FILE} already exists. No changes will be made. Exiting")
        LOGGER.error("#{SSSD_CONF_FILE} already exists. No changes will be made. Exiting")
        exit
      end

      AuthConfig.new(initial_settings).run_auth_config
      SssdConf.new(initial_settings).update
      ConfigureSssdRules.disable_tls if initial_settings[:mode] == "ldap"
      ConfigureApache.new(initial_settings).configure
      ConfigureSELinux.new(initial_settings).configure
      ConfigureApplianceSettings.new(initial_settings).configure
    end

    ConfigureDatabase.new(initial_settings).normalize_userids_to_upn
    Services.restart

    LOGGER.debug("#{$PROGRAM_NAME} Conversion Completed")
    say("#{$PROGRAM_NAME} Conversion Completed")
  end
end
